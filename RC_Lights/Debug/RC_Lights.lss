
RC_Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000003b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007dd  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000320  00000000  00000000  00000c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c3  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035d  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000019f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>
  1e:	0f c0       	rjmp	.+30     	; 0x3e <__bad_interrupt>
  20:	0e c0       	rjmp	.+28     	; 0x3e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	07 d1       	rcall	.+526    	; 0x24a <main>
  3c:	7e c1       	rjmp	.+764    	; 0x33a <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <_ZN6CLight13SetLightOnOffEb>:
	SetLightOnOff(initiallyOn);
	SetBlinkStartTime((unsigned int)0);
}

void CLight::SetLightOnOff(bool state)
{
  40:	fc 01       	movw	r30, r24
	m_lightOn = state;
  42:	60 83       	st	Z, r22
	
	if (m_lightOn)
  44:	66 23       	and	r22, r22
  46:	81 f0       	breq	.+32     	; 0x68 <_ZN6CLight13SetLightOnOffEb+0x28>
	{
		*m_port |= _BV(m_pin);
  48:	a6 85       	ldd	r26, Z+14	; 0x0e
  4a:	b7 85       	ldd	r27, Z+15	; 0x0f
  4c:	2c 91       	ld	r18, X
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	02 88       	ldd	r0, Z+18	; 0x12
  54:	02 c0       	rjmp	.+4      	; 0x5a <_ZN6CLight13SetLightOnOffEb+0x1a>
  56:	88 0f       	add	r24, r24
  58:	99 1f       	adc	r25, r25
  5a:	0a 94       	dec	r0
  5c:	e2 f7       	brpl	.-8      	; 0x56 <_ZN6CLight13SetLightOnOffEb+0x16>
  5e:	82 2b       	or	r24, r18
  60:	8c 93       	st	X, r24
		m_lightOnStrength=true;
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	81 87       	std	Z+9, r24	; 0x09
  66:	08 95       	ret
	}
	else
	{
		*m_port &= _BV(m_pin);
  68:	a6 85       	ldd	r26, Z+14	; 0x0e
  6a:	b7 85       	ldd	r27, Z+15	; 0x0f
  6c:	2c 91       	ld	r18, X
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	02 88       	ldd	r0, Z+18	; 0x12
  74:	02 c0       	rjmp	.+4      	; 0x7a <_ZN6CLight13SetLightOnOffEb+0x3a>
  76:	88 0f       	add	r24, r24
  78:	99 1f       	adc	r25, r25
  7a:	0a 94       	dec	r0
  7c:	e2 f7       	brpl	.-8      	; 0x76 <_ZN6CLight13SetLightOnOffEb+0x36>
  7e:	82 23       	and	r24, r18
  80:	8c 93       	st	X, r24
  82:	08 95       	ret

00000084 <_ZN6CLightC1EPVhhjb>:
#include <avr/io.h>
#include "CLight.h"

CLight::CLight(volatile uint8_t* port, uint8_t pin, unsigned int blinkTime, bool initiallyOn)
  84:	0f 93       	push	r16
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	ec 01       	movw	r28, r24
{
	m_port = port;
  8c:	7f 87       	std	Y+15, r23	; 0x0f
  8e:	6e 87       	std	Y+14, r22	; 0x0e
	*m_ddr_port = _BV(pin);
  90:	e8 89       	ldd	r30, Y+16	; 0x10
  92:	f9 89       	ldd	r31, Y+17	; 0x11
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	04 2e       	mov	r0, r20
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <_ZN6CLightC1EPVhhjb+0x1c>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	0a 94       	dec	r0
  a2:	e2 f7       	brpl	.-8      	; 0x9c <_ZN6CLightC1EPVhhjb+0x18>
  a4:	80 83       	st	Z, r24
	m_pin = pin;
  a6:	4a 8b       	std	Y+18, r20	; 0x12
	
	m_blinkTime = blinkTime;
  a8:	3b 83       	std	Y+3, r19	; 0x03
  aa:	2a 83       	std	Y+2, r18	; 0x02
	
	SetLightOnOff(initiallyOn);
  ac:	60 2f       	mov	r22, r16
  ae:	ce 01       	movw	r24, r28
  b0:	c7 df       	rcall	.-114    	; 0x40 <_ZN6CLight13SetLightOnOffEb>
	public:
	CLight(volatile uint8_t* port, uint8_t pin, unsigned int blinkTime=0, bool initiallyOn=true);
	
	bool GetLightOn() { return m_lightOn; }
	void SetLightOnOff(bool state);
	void SetBlinkStartTime(unsigned int timeInMs) { m_blinkStartTime = timeInMs; }
  b2:	1d 82       	std	Y+5, r1	; 0x05
  b4:	1c 82       	std	Y+4, r1	; 0x04
	SetBlinkStartTime((unsigned int)0);
}
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	0f 91       	pop	r16
  bc:	08 95       	ret

000000be <_ZN6CLight16SetLightStrengthEja>:
		*m_port &= _BV(m_pin);
	}
}

void CLight::SetLightStrength(unsigned int timeInMs, int8_t strengthInPercent)
{
  be:	fc 01       	movw	r30, r24
	m_lightStrengthStartTime=timeInMs;
  c0:	77 83       	std	Z+7, r23	; 0x07
  c2:	66 83       	std	Z+6, r22	; 0x06
	m_lightStrength=strengthInPercent;
  c4:	40 87       	std	Z+8, r20	; 0x08
	if (m_lightStrengthStartTime < m_lightStrengthStartTime-50)
  c6:	cb 01       	movw	r24, r22
  c8:	c2 97       	sbiw	r24, 0x32	; 50
  ca:	68 17       	cp	r22, r24
  cc:	79 07       	cpc	r23, r25
  ce:	20 f4       	brcc	.+8      	; 0xd8 <_ZN6CLight16SetLightStrengthEja+0x1a>
	{
		m_lightStrengthStartTime+=50;
  d0:	6e 5c       	subi	r22, 0xCE	; 206
  d2:	7f 4f       	sbci	r23, 0xFF	; 255
  d4:	77 83       	std	Z+7, r23	; 0x07
  d6:	66 83       	std	Z+6, r22	; 0x06
  d8:	08 95       	ret

000000da <_ZN6CLight11ToggleStateEv>:
		}
	}
}

bool CLight::ToggleState()
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
	SetLightOnOff(!m_lightOn);
  e0:	68 81       	ld	r22, Y
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	68 27       	eor	r22, r24
  e6:	ce 01       	movw	r24, r28
  e8:	ab df       	rcall	.-170    	; 0x40 <_ZN6CLight13SetLightOnOffEb>
	return m_lightOn;
  ea:	88 81       	ld	r24, Y
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <_ZN6CLight5BlinkEj>:
		m_lightStrengthStartTime+=50;
	}
}

void CLight::Blink(unsigned int timeInMs)
{
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <_ZN6CLight5BlinkEj+0xe>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	dd 27       	eor	r29, r29
 104:	8c 01       	movw	r16, r24
 106:	7b 01       	movw	r14, r22
	if (!(m_blinkTime < 5))
 108:	dc 01       	movw	r26, r24
 10a:	12 96       	adiw	r26, 0x02	; 2
 10c:	2d 91       	ld	r18, X+
 10e:	3c 91       	ld	r19, X
 110:	13 97       	sbiw	r26, 0x03	; 3
 112:	25 30       	cpi	r18, 0x05	; 5
 114:	31 05       	cpc	r19, r1
 116:	d0 f1       	brcs	.+116    	; 0x18c <_ZN6CLight5BlinkEj+0x9a>
	{
		volatile unsigned int tempTime=0;
 118:	1a 82       	std	Y+2, r1	; 0x02
 11a:	19 82       	std	Y+1, r1	; 0x01
	/*
		Get all times inside 1 minute.
		Set tempTime for the calculation when to toggle
	*/
		if (timeInMs < m_blinkStartTime)
 11c:	14 96       	adiw	r26, 0x04	; 4
 11e:	8d 91       	ld	r24, X+
 120:	9c 91       	ld	r25, X
 122:	15 97       	sbiw	r26, 0x05	; 5
 124:	68 17       	cp	r22, r24
 126:	79 07       	cpc	r23, r25
 128:	48 f4       	brcc	.+18     	; 0x13c <_ZN6CLight5BlinkEj+0x4a>
 12a:	fb 01       	movw	r30, r22
 12c:	e8 1b       	sub	r30, r24
 12e:	f9 0b       	sbc	r31, r25
 130:	cf 01       	movw	r24, r30
		{
			tempTime=timeInMs-m_blinkStartTime+60000;
 132:	80 5a       	subi	r24, 0xA0	; 160
 134:	95 41       	sbci	r25, 0x15	; 21
 136:	9a 83       	std	Y+2, r25	; 0x02
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	0b c0       	rjmp	.+22     	; 0x152 <_ZN6CLight5BlinkEj+0x60>
		}
		else if (timeInMs == m_blinkStartTime)
 13c:	86 17       	cp	r24, r22
 13e:	97 07       	cpc	r25, r23
 140:	19 f4       	brne	.+6      	; 0x148 <_ZN6CLight5BlinkEj+0x56>
		{
			tempTime=m_blinkStartTime;
 142:	9a 83       	std	Y+2, r25	; 0x02
 144:	89 83       	std	Y+1, r24	; 0x01
 146:	05 c0       	rjmp	.+10     	; 0x152 <_ZN6CLight5BlinkEj+0x60>
		}
		else
		{
			tempTime=timeInMs-m_blinkStartTime;
 148:	ab 01       	movw	r20, r22
 14a:	48 1b       	sub	r20, r24
 14c:	59 0b       	sbc	r21, r25
 14e:	5a 83       	std	Y+2, r21	; 0x02
 150:	49 83       	std	Y+1, r20	; 0x01
		}
		
	//	Toggle LED if the triggered
		if (!((tempTime)%(m_blinkTime/2)))
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	b9 01       	movw	r22, r18
 158:	76 95       	lsr	r23
 15a:	67 95       	ror	r22
 15c:	c7 d0       	rcall	.+398    	; 0x2ec <__udivmodhi4>
 15e:	89 2b       	or	r24, r25
 160:	69 f4       	brne	.+26     	; 0x17c <_ZN6CLight5BlinkEj+0x8a>
		{
			if (!m_blinkSet)
 162:	d8 01       	movw	r26, r16
 164:	11 96       	adiw	r26, 0x01	; 1
 166:	8c 91       	ld	r24, X
 168:	81 11       	cpse	r24, r1
 16a:	10 c0       	rjmp	.+32     	; 0x18c <_ZN6CLight5BlinkEj+0x9a>
			{
				ToggleState();
 16c:	c8 01       	movw	r24, r16
 16e:	b5 df       	rcall	.-150    	; 0xda <_ZN6CLight11ToggleStateEv>
				m_blinkSet=true; // has to be true if more than one time in 1 milisecond
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	f8 01       	movw	r30, r16
 174:	81 83       	std	Z+1, r24	; 0x01
				m_blinkStartTime=timeInMs;
 176:	f5 82       	std	Z+5, r15	; 0x05
 178:	e4 82       	std	Z+4, r14	; 0x04
 17a:	08 c0       	rjmp	.+16     	; 0x18c <_ZN6CLight5BlinkEj+0x9a>
			}
		}
		else
		{
			if (m_blinkSet)
 17c:	d8 01       	movw	r26, r16
 17e:	11 96       	adiw	r26, 0x01	; 1
 180:	8c 91       	ld	r24, X
 182:	11 97       	sbiw	r26, 0x01	; 1
 184:	88 23       	and	r24, r24
 186:	11 f0       	breq	.+4      	; 0x18c <_ZN6CLight5BlinkEj+0x9a>
			{
				m_blinkSet=false; // and set back for the next toggle
 188:	11 96       	adiw	r26, 0x01	; 1
 18a:	1c 92       	st	X, r1
			}
		}
	}
	// PWM part - for LED strength
	if (m_lightOn)
 18c:	f8 01       	movw	r30, r16
 18e:	80 81       	ld	r24, Z
 190:	88 23       	and	r24, r24
 192:	09 f4       	brne	.+2      	; 0x196 <_ZN6CLight5BlinkEj+0xa4>
 194:	51 c0       	rjmp	.+162    	; 0x238 <_ZN6CLight5BlinkEj+0x146>
	{
		if ((50-((m_lightStrengthStartTime-timeInMs)%50)) < ((uint8_t)(50*m_lightStrength/100)))
 196:	86 81       	ldd	r24, Z+6	; 0x06
 198:	97 81       	ldd	r25, Z+7	; 0x07
 19a:	8e 19       	sub	r24, r14
 19c:	9f 09       	sbc	r25, r15
 19e:	22 e3       	ldi	r18, 0x32	; 50
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	b9 01       	movw	r22, r18
 1a4:	a3 d0       	rcall	.+326    	; 0x2ec <__udivmodhi4>
 1a6:	28 1b       	sub	r18, r24
 1a8:	39 0b       	sbc	r19, r25
 1aa:	80 85       	ldd	r24, Z+8	; 0x08
 1ac:	08 2e       	mov	r0, r24
 1ae:	00 0c       	add	r0, r0
 1b0:	99 0b       	sbc	r25, r25
 1b2:	ac 01       	movw	r20, r24
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	84 0f       	add	r24, r20
 1be:	95 1f       	adc	r25, r21
 1c0:	ac 01       	movw	r20, r24
 1c2:	44 0f       	add	r20, r20
 1c4:	55 1f       	adc	r21, r21
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	84 0f       	add	r24, r20
 1cc:	95 1f       	adc	r25, r21
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	64 e6       	ldi	r22, 0x64	; 100
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	9e d0       	rcall	.+316    	; 0x314 <__divmodhi4>
 1d8:	77 27       	eor	r23, r23
 1da:	26 17       	cp	r18, r22
 1dc:	37 07       	cpc	r19, r23
 1de:	b8 f4       	brcc	.+46     	; 0x20e <_ZN6CLight5BlinkEj+0x11c>
		{
			if (m_lightOnStrength == false)
 1e0:	81 85       	ldd	r24, Z+9	; 0x09
 1e2:	81 11       	cpse	r24, r1
 1e4:	10 c0       	rjmp	.+32     	; 0x206 <_ZN6CLight5BlinkEj+0x114>
			{
				*m_port |= _BV(m_pin);
 1e6:	06 84       	ldd	r0, Z+14	; 0x0e
 1e8:	f7 85       	ldd	r31, Z+15	; 0x0f
 1ea:	e0 2d       	mov	r30, r0
 1ec:	20 81       	ld	r18, Z
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	d8 01       	movw	r26, r16
 1f4:	52 96       	adiw	r26, 0x12	; 18
 1f6:	0c 90       	ld	r0, X
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <_ZN6CLight5BlinkEj+0x10c>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <_ZN6CLight5BlinkEj+0x108>
 202:	82 2b       	or	r24, r18
 204:	80 83       	st	Z, r24
			}
			m_lightOnStrength=true;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	f8 01       	movw	r30, r16
 20a:	81 87       	std	Z+9, r24	; 0x09
 20c:	15 c0       	rjmp	.+42     	; 0x238 <_ZN6CLight5BlinkEj+0x146>
		}
		else
		{
			if (m_lightOnStrength == true)
 20e:	d8 01       	movw	r26, r16
 210:	81 85       	ldd	r24, Z+9	; 0x09
 212:	88 23       	and	r24, r24
 214:	79 f0       	breq	.+30     	; 0x234 <_ZN6CLight5BlinkEj+0x142>
			{
				*m_port &= _BV(m_pin);
 216:	06 84       	ldd	r0, Z+14	; 0x0e
 218:	f7 85       	ldd	r31, Z+15	; 0x0f
 21a:	e0 2d       	mov	r30, r0
 21c:	20 81       	ld	r18, Z
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	52 96       	adiw	r26, 0x12	; 18
 224:	0c 90       	ld	r0, X
 226:	02 c0       	rjmp	.+4      	; 0x22c <_ZN6CLight5BlinkEj+0x13a>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <_ZN6CLight5BlinkEj+0x136>
 230:	82 23       	and	r24, r18
 232:	80 83       	st	Z, r24
			}
			m_lightOnStrength=false;
 234:	f8 01       	movw	r30, r16
 236:	11 86       	std	Z+9, r1	; 0x09
		}
	}
}
 238:	ce 5f       	subi	r28, 0xFE	; 254
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	08 95       	ret

0000024a <main>:

// Time variables
volatile unsigned int milisec=0;

int main(void)
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	dd 27       	eor	r29, r29
 252:	c6 52       	subi	r28, 0x26	; 38
 254:	cd bf       	out	0x3d, r28	; 61
	CLight frontR(&PORTA, PA1, 0);
	CLight rearL(&PORTA, PA2, 0);
	CLight rearR(&PORTA, PA3, 0);
	CLight blinkL(&PORTA, PA4, 1000);
	CLight blinkR(&PORTA, PA5, 1000);
*/	CLight rotatL(&PORTA, PA6, 500, true);
 256:	01 e0       	ldi	r16, 0x01	; 1
 258:	24 ef       	ldi	r18, 0xF4	; 244
 25a:	31 e0       	ldi	r19, 0x01	; 1
 25c:	46 e0       	ldi	r20, 0x06	; 6
 25e:	6b e3       	ldi	r22, 0x3B	; 59
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	ce 01       	movw	r24, r28
 264:	44 96       	adiw	r24, 0x14	; 20
 266:	0e df       	rcall	.-484    	; 0x84 <_ZN6CLightC1EPVhhjb>
	rotatL.SetLightStrength(milisec, (int8_t)20);
 268:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <_edata>
 26c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <_edata+0x1>
 270:	44 e1       	ldi	r20, 0x14	; 20
 272:	ce 01       	movw	r24, r28
 274:	44 96       	adiw	r24, 0x14	; 20
 276:	23 df       	rcall	.-442    	; 0xbe <_ZN6CLight16SetLightStrengthEja>
	CLight rotatR(&PORTA, PA7, 500, false);
 278:	00 e0       	ldi	r16, 0x00	; 0
 27a:	24 ef       	ldi	r18, 0xF4	; 244
 27c:	31 e0       	ldi	r19, 0x01	; 1
 27e:	47 e0       	ldi	r20, 0x07	; 7
 280:	6b e3       	ldi	r22, 0x3B	; 59
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	ce 01       	movw	r24, r28
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	fd de       	rcall	.-518    	; 0x84 <_ZN6CLightC1EPVhhjb>
	rotatR.SetLightStrength(milisec, (int8_t)95);
 28a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <_edata>
 28e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <_edata+0x1>
 292:	4f e5       	ldi	r20, 0x5F	; 95
 294:	ce 01       	movw	r24, r28
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	12 df       	rcall	.-476    	; 0xbe <_ZN6CLight16SetLightStrengthEja>
*/
	while (1) 
    {

#if defined(DEBUG)
		milisec++;
 29a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 29e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 2a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		frontR.Blink(milisec);
		rearL.Blink(milisec);
		rearR.Blink(milisec);
		blinkL.Blink(milisec);
		blinkR.Blink(milisec);
*/		rotatL.Blink(milisec);
 2ac:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <_edata>
 2b0:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <_edata+0x1>
 2b4:	ce 01       	movw	r24, r28
 2b6:	44 96       	adiw	r24, 0x14	; 20
 2b8:	1c df       	rcall	.-456    	; 0xf2 <_ZN6CLight5BlinkEj>
		rotatR.Blink(milisec);
 2ba:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <_edata>
 2be:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <_edata+0x1>
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	15 df       	rcall	.-470    	; 0xf2 <_ZN6CLight5BlinkEj>

#if defined(DEBUG)
		if (milisec >= 60000)
 2c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2cc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 2d0:	80 36       	cpi	r24, 0x60	; 96
 2d2:	9a 4e       	sbci	r25, 0xEA	; 234
 2d4:	10 f3       	brcs	.-60     	; 0x29a <main+0x50>
		{
			milisec-=60000;
 2d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2da:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 2de:	80 56       	subi	r24, 0x60	; 96
 2e0:	9a 4e       	sbci	r25, 0xEA	; 234
 2e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 2e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 2ea:	d7 cf       	rjmp	.-82     	; 0x29a <main+0x50>

000002ec <__udivmodhi4>:
 2ec:	aa 1b       	sub	r26, r26
 2ee:	bb 1b       	sub	r27, r27
 2f0:	51 e1       	ldi	r21, 0x11	; 17
 2f2:	07 c0       	rjmp	.+14     	; 0x302 <__udivmodhi4_ep>

000002f4 <__udivmodhi4_loop>:
 2f4:	aa 1f       	adc	r26, r26
 2f6:	bb 1f       	adc	r27, r27
 2f8:	a6 17       	cp	r26, r22
 2fa:	b7 07       	cpc	r27, r23
 2fc:	10 f0       	brcs	.+4      	; 0x302 <__udivmodhi4_ep>
 2fe:	a6 1b       	sub	r26, r22
 300:	b7 0b       	sbc	r27, r23

00000302 <__udivmodhi4_ep>:
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	5a 95       	dec	r21
 308:	a9 f7       	brne	.-22     	; 0x2f4 <__udivmodhi4_loop>
 30a:	80 95       	com	r24
 30c:	90 95       	com	r25
 30e:	bc 01       	movw	r22, r24
 310:	cd 01       	movw	r24, r26
 312:	08 95       	ret

00000314 <__divmodhi4>:
 314:	97 fb       	bst	r25, 7
 316:	07 2e       	mov	r0, r23
 318:	16 f4       	brtc	.+4      	; 0x31e <__divmodhi4+0xa>
 31a:	00 94       	com	r0
 31c:	06 d0       	rcall	.+12     	; 0x32a <__divmodhi4_neg1>
 31e:	77 fd       	sbrc	r23, 7
 320:	08 d0       	rcall	.+16     	; 0x332 <__divmodhi4_neg2>
 322:	e4 df       	rcall	.-56     	; 0x2ec <__udivmodhi4>
 324:	07 fc       	sbrc	r0, 7
 326:	05 d0       	rcall	.+10     	; 0x332 <__divmodhi4_neg2>
 328:	3e f4       	brtc	.+14     	; 0x338 <__divmodhi4_exit>

0000032a <__divmodhi4_neg1>:
 32a:	90 95       	com	r25
 32c:	81 95       	neg	r24
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	08 95       	ret

00000332 <__divmodhi4_neg2>:
 332:	70 95       	com	r23
 334:	61 95       	neg	r22
 336:	7f 4f       	sbci	r23, 0xFF	; 255

00000338 <__divmodhi4_exit>:
 338:	08 95       	ret

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
